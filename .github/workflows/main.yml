# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  CI-CD:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    ## gradle build
    - name: Build with Gradle # 실제 application build(-x 옵션을 통해 test는 제외)
      run: |
        chmod +x ./gradlew
        ./gradlew build -x test
    ## docker build & push to production
    - name: Docker build & push
      if: contains(github.ref, 'master')
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-prod -t ${{ secrets.DOCKER_REPO }}/kotlin_app_image .
          docker push ${{ secrets.DOCKER_REPO }}/kotlin_app_image
    ## deploy to production final v2
    - name: Deploy
      uses: appleboy/ssh-action@master
      id: deploy
      if: contains(github.ref, 'master')
      with:
          host: ${{ secrets.HOST_PROD }}
          username: ${{ secrets.PROD_USERNAME }}
          password: ${{ secrets.PROD_PASSWORD }}
          envs: GITHUB_SHA
          script: |
              sudo docker rm -f $(docker ps -qa)
              sudo docker pull ${{ secrets.DOCKER_REPO }}/kotlin_app_image
              docker-compose up --build -d
              docker image prune -f
    - name: Slack Notification
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
          SLACK_ICON_EMOJI: ':bell:'
          SLACK_CHANNEL: mnist-project
          SLACK_MESSAGE: 'Upload & Run pipeline :rocket: - ${{job.status}}'
          SLACK_USERNAME: Github
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
